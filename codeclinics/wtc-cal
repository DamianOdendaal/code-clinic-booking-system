#!/usr/bin/python3

import os
import sys
# from login import user_auth as authentication
from login import user_auth
from slots import *
from bookings import *
# from process.list_calendars import *


#create a seperate file for the installation
def install_packages():
    """
    This function will load all the necessary modules needed to run the wtc-cal
    """
    #Should use subprocess.run() or subprocess.Popen() so that we can manupilate the output
    #Basicall hide the package installations from the user
    os.system("pip3 install termcolor")
    os.system("pip3 install ptable")
    os.system("pip3 install tabulate")
    os.system("pip3 install --upgrade google-api-python-client google-auth-httplib2 google-auth-auth-oauthlib ")



valid_sys_commands = ['volunteer', 'status', 'login', 'logout', 'slots',
    'book', 'cancel', 'logout', 'help']


def command_instructions():
    """
    This function prints out statements that shows how the booking system works.
    """
    
    if len(sys.argv) >= 2:
        command = ""
        for arg in sys.argv[1:]:
            command += f"{arg} "
        print(f"Unrecognized command: \"wtc-cal {command.strip()}\"")
    elif len(sys.argv) == 1:
        print("Please provide some options\n")
    
    print("Information\n")
    print("\thelp\t\tRun this command to view hot to run wtc-cal tool\n")
    print("User Authentication\n")
    print("\tstatus\t\tRun this command to check the connection")
    print("\tlogin\t\tRun this command to log into the calendars")
    print("\tlogout\t\tRun this to logout of the calendar")
    print("\nProcessing Slots\n")
    print("\tslots\t\tRun this command to see all slots [BOOKED], [OPEN]")
    print("\tbook\t\tRun this command to book a slot")
    print("\tvolunteer\tRun this command to volunteer for a slot")
    print(end="\tcancel\t\t")
    print("Run this command to cancel a booking(s) or a volunteering slot\n")


def command_sys_argv():
    """
    This function handles command line arguments that work with the booking system.
    """

    if len(sys.argv) == 2 and sys.argv[1] in valid_sys_commands:
        command = sys.argv[1]

        if 'status' == command:
            user_auth.get_user_status()
        elif 'login' == command:
            user_auth.user_login()
        elif 'logout' == command:
            user_auth.user_logout()
        elif 'help' == command:
            command_instructions()
        elif os.path.exists("token.pickle") and command in valid_sys_commands:
            if "slots" == command:
                get_slots()
            elif "book" == command:
                book("")
            elif "volunteer" == command:
                volunteer("")
            elif "cancel" == command:
                cancel("etag")
        else:
            invalid_token()
    else:
        command_instructions()



if __name__ == "__main__":
    command_sys_argv()