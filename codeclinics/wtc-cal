#!/usr/bin/python3

import os
import sys
from login import user_auth
from slots import *
from volunteer import *
from patient import *


#create a seperate file for the installation
def install_packages():
    """
    This function will load all the necessary modules needed to run the wtc-cal
    """
    #Should use subprocess.run() or subprocess.Popen() so that we can manupilate the output
    #Basicall hide the package installations from the user
    os.system("pip3 install termcolor")
    os.system("pip3 install ptable")
    os.system("pip3 install tabulate")
    os.system("pip3 install --upgrade google-api-python-client google-auth-httplib2 google-auth-auth-oauthlib ")



valid_sys_commands = ['config', 'slot_details', 'my_cal', 'volunteer', 
'status', 'login', 'logout', 'slots','book', 'cancel', 'logout', 'help']


def command_instructions():
    """
    This function prints out statements that shows how the booking system works.
    """
    
    if len(sys.argv) >= 2 and sys.argv[1] != 'help':
        command = ""
        for arg in sys.argv[1:]:
            command += f"{arg} "
        print(f"Unrecognized command: \"wtc-cal {command.strip()}\"")
    elif len(sys.argv) == 1:
        print("Please provide some options\n")
        print("\tusage: wtc-cal <command> [args]")

    
    print('\nThese are wtc-cal commands that can be used in this Code Clinic:\n')

    print("\thelp\t\tView commands to run wtc-cal tool\n")

    print('setup and login')
    print('\tstatus\t\tUsed to check user connection status')
    print('\tlogin\t\tUsed to login')
    print('\tlogout\t\tUsed to logout')
    print('\tconfig\t\tUsed to config\n')
    
    print('processing slots')
    print('\tvolunteer\tCreate a slot to be booked')
    print('\tbook\t\tUsed to book an empty slot as a patient')
    print('\tcancel\t\tUsed to cancel a booking or volunteering slot\n')

    print('calendars and viewing')
    print('\tslots\t\tView volunteer slots')
    print("\tslot_details \tView details of a given slot")
    print('\tmy_cal\t\tView your personal calendar\n\n')


def command_sys_argv():
    """
    This function handles command line arguments that work with the booking system.
    """

    if len(sys.argv) >= 2 and sys.argv[1] in valid_sys_commands:
        command = sys.argv[1]

        if 'status' == command:
            user_auth.get_user_status()
        elif 'login' == command:
            user_auth.user_login()
        elif 'config' == command:
                user_auth.show_config()
        elif 'logout' == command:
            save_data(get_code_clinics_calendar())
            user_auth.user_logout()
        elif 'help' == command:
            command_instructions()
        elif command in valid_sys_commands:
            if user_auth.get_login_state():
                if "slots" == command:
                    show_calendars()
                elif "slot_details" == command:
                    slot_details()
                elif "my_cal" == command:
                    show_calendars('primary')
                elif "book" == command:
                    book()
                    save_data(get_code_clinics_calendar())
                elif "volunteer" == command:
                    volunteer()
                    save_data(get_code_clinics_calendar())
                elif "cancel" == command:
                    print("functionality doesn't exist yet")
                    save_data(get_code_clinics_calendar())
            else:
                print("Please login to use this command!")
    else:
        command_instructions()


def invalid_token():
    """
    """
    # duration = "{ secs: " + secs + ", nanos: " + nanos + "})."
    print(f"Token expired: (), Duration ")
    print("\n  wtc-cal login\n\n")


if __name__ == "__main__":
    # if user_auth.auto_logout():
    #     invalid_token()

    command_sys_argv()